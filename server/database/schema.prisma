generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Sex {
  Male
  Female
}

enum SocialMedia {
  Facebook
  Github
  Instagram
  LinkedIn
  Reddit
  Signal
  Snapchat
  Telegram
  TikTok
  Twitter
  Website
  Whatsapp
  Youtube
}

// Vereniging model
//
model Association {
  id          String    @id @default(uuid()) @db.Uuid
  name        String    @unique
  description String?
  startDate   DateTime  @default(now()) @db.Date
  stopDate    DateTime? @db.Date

  groups      Group[]
  groupTypes  GroupType[]
  memberships AssociationMembership[]
  memberTypes MemberType[]
  preferences Preference[]

  @@map("associations")
}

// Lidmaatschap aan een vereeniging
//
model AssociationMembership {
  id        String    @id @default(uuid()) @db.Uuid
  startDate DateTime  @default(now()) @db.Date
  stopDate  DateTime? @db.Date

  associationId String @db.Uuid
  memberId      String @db.Uuid
  memberTypeId  String @db.Uuid

  association Association @relation(fields: [associationId], references: [id], onDelete: Restrict)
  member      Member      @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberType  MemberType  @relation(fields: [memberTypeId], references: [id], onDelete: Restrict)

  @@unique([startDate, associationId, memberId])
  @@map("association_memberships")
}

// Contactgegevens van een ouder/voogd/oid
//
model Contact {
  id          String  @id @default(uuid()) @db.Uuid
  name        String
  connection  String
  phoneNumber String? @unique
  email       String? @unique

  memberId String @db.Uuid

  member Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  @@unique([name, memberId])
  @@map("member_contacts")
}

// Groep model
//
model Group {
  id          String   @id @default(uuid()) @db.Uuid
  name        String
  description String?
  email       String?
  isActive    Boolean  @default(true)
  startDate   DateTime @default(now())
  lastActive  DateTime @default(now()) @updatedAt
  permissions String[]

  associationId String @db.Uuid
  groupTypeId   String @db.Uuid

  editions    GroupEdition[]
  members     GroupMembership[]
  socials     Social[]
  association Association       @relation(fields: [associationId], references: [id], onDelete: Restrict)
  type        GroupType         @relation(fields: [groupTypeId], references: [id], onDelete: Restrict)

  @@map("groups")
}

// Groep namen waarvan maar 1 groep mag zijn
//
model RestrictedGroupNames {
  name String @unique
}

// Groep editie
//
model GroupEdition {
  id          String  @id @default(uuid()) @db.Uuid
  name        String
  description String?
  isActive    Boolean @default(true)

  groupId String @db.Uuid

  memberships GroupMembership[]
  group       Group             @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([name, groupId])
  @@map("group_editions")
}

// Lidmaatschap aan een groep
//
model GroupMembership {
  id        String    @id @default(uuid()) @db.Uuid
  function  String?
  startDate DateTime  @default(now()) @db.Date
  stopDate  DateTime? @db.Date

  memberId  String? @db.Uuid
  groupId   String  @db.Uuid
  editionId String? @db.Uuid

  member  Member?       @relation(fields: [memberId], references: [id], onDelete: SetNull)
  group   Group         @relation(fields: [groupId], references: [id], onDelete: Cascade)
  edition GroupEdition? @relation(fields: [editionId], references: [id], onDelete: SetNull)

  @@unique([memberId, editionId])
  @@map("group_memberships")
}

// Groep Typen
//
model GroupType {
  id          String  @id @default(uuid()) @db.Uuid
  name        String
  plural      String
  description String?

  associationId String @db.Uuid

  groups      Group[]
  association Association @relation(fields: [associationId], references: [id], onDelete: Cascade)

  @@unique([name, associationId])
  @@map("group_types")
}

// Member model
//
model Member {
  id          String   @id @default(uuid()) @db.Uuid
  title       String?
  initials    String
  firstName   String
  insertion   String?
  lastName    String
  email       String
  phoneNumber String
  iban        String
  address     String
  number      String
  city        String
  zipcode     String
  country     String
  gender      Sex
  birthday    DateTime @db.Date
  permissions String[]

  associations   AssociationMembership[]
  contacts       Contact[]
  groups         GroupMembership[]
  preferences    MemberPreference[]
  qualifications MemberQualification[]
  studies        MemberStudy[]
  socials        Social[]

  @@map("members")
}

// Voorkeuren
//
model MemberPreference {
  id    String  @id @default(uuid()) @db.Uuid
  value String?

  memberId     String @db.Uuid
  preferenceId String @db.Uuid

  member     Member     @relation(fields: [memberId], references: [id], onDelete: Cascade)
  preference Preference @relation(fields: [preferenceId], references: [id], onDelete: Cascade)

  @@unique([memberId, preferenceId])
  @@map("member_preferences")
}

// Kwalificaties
//
model MemberQualification {
  id        String    @id @default(uuid()) @db.Uuid
  remarks   String?
  startDate DateTime  @default(now()) @db.Date
  stopDate  DateTime? @db.Date

  memberId        String @db.Uuid
  qualificationId String @db.Uuid

  member        Member        @relation(fields: [memberId], references: [id], onDelete: Cascade)
  qualification Qualification @relation(fields: [qualificationId], references: [id], onDelete: Cascade)

  @@unique([memberId, qualificationId])
  @@map("member_qualifications")
}

// Studiegevens van een lid
//
model MemberStudy {
  id          String    @id @default(uuid()) @db.Uuid
  studyNumber String?
  startDate   DateTime  @db.Date
  stopDate    DateTime? @db.Date

  memberId String @db.Uuid
  studyId  String @db.Uuid

  member Member @relation(fields: [memberId], references: [id], onDelete: Cascade)
  study  Study  @relation(fields: [studyId], references: [id], onDelete: Restrict)

  @@unique([memberId, studyId])
  @@map("member_studies")
}

// Lidmaatschap type (aan vereniging
//
model MemberType {
  id          String  @id @default(uuid()) @db.Uuid
  name        String
  plural      String
  description String?

  associationId String @db.Uuid

  memberships AssociationMembership[]
  association Association             @relation(fields: [associationId], references: [id], onDelete: Cascade)

  @@unique([name, associationId])
  @@map("member_types")
}

// Definitie van een voorkeur
//
model Preference {
  id          String   @id @default(uuid()) @db.Uuid
  name        String
  description String?
  options     String[]

  associationId String @db.Uuid

  memberPreferences MemberPreference[]
  association       Association        @relation(fields: [associationId], references: [id], onDelete: Cascade)

  @@unique([name, associationId])
  @@map("preferences")
}

// Definitie van een kwalificatie
//
model Qualification {
  id          String  @id @default(uuid()) @db.Uuid
  name        String  @unique
  description String?

  qualifications MemberQualification[]

  @@map("qualifications")
}

// Social media link
//
model Social {
  id    String      @id @default(uuid()) @db.Uuid
  media SocialMedia
  link  String      @unique

  groupId  String? @db.Uuid
  memberId String? @db.Uuid

  group  Group?  @relation(fields: [groupId], references: [id], onDelete: Cascade)
  member Member? @relation(fields: [memberId], references: [id], onDelete: Cascade)

  @@map("socials")
}

// Studie model
//
model Study {
  id          String @id @default(uuid()) @db.Uuid
  name        String
  level       String
  institution String

  memberStudies MemberStudy[]

  @@unique([name, level, institution])
  @@map("studies")
}
